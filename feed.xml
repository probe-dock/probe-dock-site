<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Probe Dock</title>
    <description>ProbeDock is a test tracking and analysis tool.
</description>
    <link>http://probedock.io/</link>
    <atom:link href="http://probedock.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sun, 18 Oct 2015 12:58:06 +0200</pubDate>
    <lastBuildDate>Sun, 18 Oct 2015 12:58:06 +0200</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Integrating Probe Dock with Mocha</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://mochajs.org/&quot;&gt;Mocha&lt;/a&gt; is one of the most popular JavaScript testing frameworks. We have integrated it with Probe Dock, so that test results can be collected and analyzed via our web interface.&lt;/p&gt;

&lt;p&gt;Mocha provides a lot of very nice features, which make testing efficient and enjoyable. The framework allows you to test both server-side and client-side components. It supports asynchronous tests, custom reporters and much more.&lt;/p&gt;

&lt;p&gt;To illustrate how Probe Dock can be integrated with existing testing frameworks, we have implemented a reference project where automated tests are written and executed with Mocha and where test results are sent to Probe Dock.&lt;/p&gt;

&lt;p&gt;Have a look at &lt;a href=&quot;https://github.com/probedock/probedock-demo-mocha&quot;&gt;this GitHub repo&lt;/a&gt; to see the result and get access to our Mocha runner. If you are using this framework, you will be able to collect your test results and feed them in your Probe Dock server.&lt;/p&gt;

&lt;h3 id=&quot;what-is-our-system-under-test&quot;&gt;What is our System-Under-Test?&lt;/h3&gt;

&lt;p&gt;In this demo, we consider &lt;strong&gt;two different systems&lt;/strong&gt; that we want to validate with our Mocha tests:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;the first one is &lt;strong&gt;a very simple Node.js module&lt;/strong&gt;, which exposes two functions. We are going to check that the functions return values of the expected type.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the second one is &lt;strong&gt;a fictive distributed application&lt;/strong&gt; (with a front-end, a back-end, etc.). There is actually no code at all: we only want to show that with Mocha, it is possible to recursively define test suites within test suites.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the code of the node module that we will test:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * This is the first System-Under-Test for our demo. It is a &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * very basic node module, which exposes two functions. They&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * both return a string value. The first function is synchronous,&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * the second one is asynchronous.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doSomething&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;sweet&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doSomethingAsynchronously&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;cool&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;write-tests-with-mocha&quot;&gt;Write tests with Mocha&lt;/h3&gt;

&lt;p&gt;Writing tests with Mocha is easy. You declare &lt;strong&gt;test suites&lt;/strong&gt; by calling the &lt;code&gt;describe&lt;/code&gt; function. You then declare &lt;strong&gt;individual tests&lt;/strong&gt; by calling the &lt;code&gt;it&lt;/code&gt; function. In the callback function that you pass to &lt;code&gt;it&lt;/code&gt;, you invoke the System-Under-Test (e.g. you make calls to your Node.js module) and then make assertions on the provided results.&lt;/p&gt;

&lt;p&gt;Here is the test suite for validating the behavior of our simple Node.js module:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Let&amp;#39;s use the standard node.js module &amp;quot;assert&amp;quot; for making assertions. &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * We could use a richer framework, such as should.js or chai.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;assert&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Load the code that we want to test. It is a simple node module, &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * which exposes two functions.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;../app/index.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Create a test suite for our &amp;quot;app&amp;quot; node module.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;	 * Within the module test suite, create a test suite for &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;	 * the &amp;quot;doSomething()&amp;quot; function&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;	 */&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;doSomething&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

		&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;		 * Define a first test for the function&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;		 */&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;shouldReturnAString&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;string&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

		&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;		 * Define a second test for the function&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;		 */&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;shouldReturnSweet&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;sweet&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;	 * Within the module test suite, create a test suite for the &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;	 * &amp;quot;doSomethingAsynchronously()&amp;quot; function.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;	 */&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;doSomethingAsynchronously&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;shouldReturnCool&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doSomethingAsynchronously&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;cool&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And here is the test suite for validating the behavior of our fictive distributed application:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Let&amp;#39;s use the standard node.js module &amp;quot;assert&amp;quot; for making assertions. We&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * could use a richer framework, such as should.js or chai.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;assert&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Create a test suite for a distributed application, composed of several&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * sub-systems. This shows how test suites can be nested in multiple levels.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;A distributed application&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The backend sub-system&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

		&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The REST API&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	
			&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;should work&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{});&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

		&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The business services&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	
			&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;should work&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{});&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

		&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The data access layer&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	
			&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;should work&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Technical error while talking to the database.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The front-end sub-system&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The admin interface&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	
			&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The monitoring pages&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	
				&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;should work&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{});&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The configuration pages&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	
				&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;should work&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{});&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The end-user interface&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	
			&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The account pages&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	
				&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;should work&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hasWorked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasWorked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The fun pages&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	
				&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;should work&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{});&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;configure-your-probe-dock-environment&quot;&gt;Configure your Probe Dock environment&lt;/h3&gt;

&lt;p&gt;To use Probe Dock, you can install your own server. You can also get a free trial account on our SaaS platform. You will find all details on &lt;a href=&quot;http://probedock.io/getting-started/&quot;&gt;this page&lt;/a&gt;. After registration, you will get &lt;strong&gt;credentials&lt;/strong&gt; that you will need to store in a local configuration file (see below).&lt;/p&gt;

&lt;p&gt;Once you have access to a server, you will also need to &lt;strong&gt;create a new Probe Dock project&lt;/strong&gt; and get its &lt;strong&gt;API key&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Finally, you will need to make sure that &lt;strong&gt;two configuration files&lt;/strong&gt; are properly setup on your machine. Firstly, in &lt;code&gt;~/.probedock/probedock.yml&lt;/code&gt;, you will need to enter the URL of your server and your user credentials. Secondly, in your project folder, you will need a &lt;code&gt;probedock.yml&lt;/code&gt; file with the API key of your project.&lt;/p&gt;

&lt;h3 id=&quot;run-the-tests&quot;&gt;Run the tests&lt;/h3&gt;

&lt;p&gt;To run the tests, use this command: &lt;code&gt;node probedock-mocha-runner.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In our implementation, we have used the &lt;strong&gt;Mocha programmatic API&lt;/strong&gt; to control the Mocha runner and be notified of test successes and failures. Once all tests have been executed, we send the results to the Probe Dock server with our &lt;a href=&quot;https://www.npmjs.com/package/probedock-node&quot;&gt;probedock-node&lt;/a&gt; library. This is the npm module that you should use if you want to integrate Probe Dock in your development workflow and want to have a lot of control and flexibility.&lt;/p&gt;

&lt;p&gt;When you run the command, you should see the following output on your console. Note that two tests are expected to fail (we generate exceptions on purpose).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/2015-10-17-probedock-integration-with-mocha/console-01.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;see-the-test-results-in-probe-dock&quot;&gt;See the test results in Probe Dock&lt;/h3&gt;

&lt;p&gt;If your setup is correct, you should see the test results in the Probe Dock web interface.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/2015-10-17-probedock-integration-with-mocha/server-01.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/2015-10-17-probedock-integration-with-mocha/server-02.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;how-do-all-pieces-fit-together&quot;&gt;How do all pieces fit together?&lt;/h3&gt;

&lt;p&gt;You will find more details about the implementation on our &lt;a href=&quot;https://github.com/probedock/probedock-demo-mocha&quot;&gt;GitHub repo&lt;/a&gt;, but the following diagram should already give you a pretty good idea about how Probe Dock, Mocha and your code base fit together.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/2015-10-17-probedock-integration-with-mocha/architecture.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Hopefully, this article and the companion &lt;a href=&quot;https://github.com/probedock/probedock-demo-mocha&quot;&gt;GitHub repo&lt;/a&gt; have given you a good understanding about what needs to be done in order to post test results from a JavaScript environment. If you are using Mocha, then you can use our code either by invoking our runner script from the command line, or by integrating in your favorite build tool (e.g. Grunt, Gulp).&lt;/p&gt;

&lt;p&gt;If you are using another test framework, it should not be too difficult to adapt our code to your needs. It is almost always about using the test framework to launch a runner, listen to test result events and ask the Probe Dock client to send the results to the server.&lt;/p&gt;
</description>
        <pubDate>Sat, 17 Oct 2015 15:00:00 +0200</pubDate>
        <link>http://probedock.io/blog/howto/2015/10/17/probedock-integration-with-mocha/</link>
        <guid isPermaLink="true">http://probedock.io/blog/howto/2015/10/17/probedock-integration-with-mocha/</guid>
        
        
        <category>howto</category>
        
      </item>
    
      <item>
        <title>Integrating Probe Dock with Mocha</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://mochajs.org/&quot;&gt;Mocha&lt;/a&gt; is one of the most popular JavaScript testing frameworks. We have integrated it with Probe Dock, so that test results can be collected and analyzed via our web interface.&lt;/p&gt;

&lt;p&gt;Mocha provides a lot of very nice features, which make testing efficient and enjoyable. The framework allows you to test both server-side and client-side components. It supports asynchronous tests, custom reporters and much more.&lt;/p&gt;

&lt;p&gt;To illustrate how Probe Dock can be integrated with existing testing frameworks, we have implemented a reference project where automated tests are written and executed with Mocha and where test results are sent to Probe Dock.&lt;/p&gt;

&lt;p&gt;Have a look at &lt;a href=&quot;https://github.com/probedock/probedock-demo-mocha&quot;&gt;this GitHub repo&lt;/a&gt; to see the result and get access to our Mocha runner. If you are using this framework, you will be able to collect your test results and feed them in your Probe Dock server.&lt;/p&gt;

&lt;h3 id=&quot;what-is-our-system-under-test&quot;&gt;What is our System-Under-Test?&lt;/h3&gt;

&lt;p&gt;In this demo, we consider &lt;strong&gt;two different systems&lt;/strong&gt; that we want to validate with our Mocha tests:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;the first one is &lt;strong&gt;a very simple Node.js module&lt;/strong&gt;, which exposes two functions. We are going to check that the functions return values of the expected type.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the second one is &lt;strong&gt;a fictive distributed application&lt;/strong&gt; (with a front-end, a back-end, etc.). There is actually no code at all: we only want to show that with Mocha, it is possible to recursively define test suites within test suites.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the code of the node module that we will test:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * This is the first System-Under-Test for our demo. It is a &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * very basic node module, which exposes two functions. They&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * both return a string value. The first function is synchronous,&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * the second one is asynchronous.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doSomething&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;sweet&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doSomethingAsynchronously&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;cool&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;write-tests-with-mocha&quot;&gt;Write tests with Mocha&lt;/h3&gt;

&lt;p&gt;Writing tests with Mocha is easy. You declare &lt;strong&gt;test suites&lt;/strong&gt; by calling the &lt;code&gt;describe&lt;/code&gt; function. You then declare &lt;strong&gt;individual tests&lt;/strong&gt; by calling the &lt;code&gt;it&lt;/code&gt; function. In the callback function that you pass to &lt;code&gt;it&lt;/code&gt;, you invoke the System-Under-Test (e.g. you make calls to your Node.js module) and then make assertions on the provided results.&lt;/p&gt;

&lt;p&gt;Here is the test suite for validating the behavior of our simple Node.js module:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Let&amp;#39;s use the standard node.js module &amp;quot;assert&amp;quot; for making assertions. &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * We could use a richer framework, such as should.js or chai.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;assert&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Load the code that we want to test. It is a simple node module, &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * which exposes two functions.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;../app/index.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Create a test suite for our &amp;quot;app&amp;quot; node module.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;	 * Within the module test suite, create a test suite for &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;	 * the &amp;quot;doSomething()&amp;quot; function&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;	 */&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;doSomething&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

		&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;		 * Define a first test for the function&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;		 */&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;shouldReturnAString&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;string&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

		&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;		 * Define a second test for the function&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;		 */&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;shouldReturnSweet&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;sweet&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;	 * Within the module test suite, create a test suite for the &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;	 * &amp;quot;doSomethingAsynchronously()&amp;quot; function.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;	 */&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;doSomethingAsynchronously&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;shouldReturnCool&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doSomethingAsynchronously&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;cool&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And here is the test suite for validating the behavior of our fictive distributed application:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Let&amp;#39;s use the standard node.js module &amp;quot;assert&amp;quot; for making assertions. We&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * could use a richer framework, such as should.js or chai.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;assert&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Create a test suite for a distributed application, composed of several&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * sub-systems. This shows how test suites can be nested in multiple levels.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;A distributed application&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The backend sub-system&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

		&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The REST API&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	
			&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;should work&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{});&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

		&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The business services&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	
			&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;should work&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{});&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

		&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The data access layer&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	
			&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;should work&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Technical error while talking to the database.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The front-end sub-system&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The admin interface&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	
			&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The monitoring pages&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	
				&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;should work&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{});&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The configuration pages&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	
				&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;should work&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{});&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The end-user interface&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	
			&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The account pages&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	
				&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;should work&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hasWorked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasWorked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The fun pages&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	
				&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;should work&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{});&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;configure-your-probe-dock-environment&quot;&gt;Configure your Probe Dock environment&lt;/h3&gt;

&lt;p&gt;To use Probe Dock, you can install your own server. You can also get a free trial account on our SaaS platform. You will find all details on &lt;a href=&quot;http://probedock.io/getting-started/&quot;&gt;this page&lt;/a&gt;. After registration, you will get &lt;strong&gt;credentials&lt;/strong&gt; that you will need to store in a local configuration file (see below).&lt;/p&gt;

&lt;p&gt;Once you have access to a server, you will also need to &lt;strong&gt;create a new Probe Dock project&lt;/strong&gt; and get its &lt;strong&gt;API key&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Finally, you will need to make sure that &lt;strong&gt;two configuration files&lt;/strong&gt; are properly setup on your machine. Firstly, in &lt;code&gt;~/.probedock/probedock.yml&lt;/code&gt;, you will need to enter the URL of your server and your user credentials. Secondly, in your project folder, you will need a &lt;code&gt;probedock.yml&lt;/code&gt; file with the API key of your project.&lt;/p&gt;

&lt;h3 id=&quot;run-the-tests&quot;&gt;Run the tests&lt;/h3&gt;

&lt;p&gt;To run the tests, use this command: &lt;code&gt;node probedock-mocha-runner.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In our implementation, we have used the &lt;strong&gt;Mocha programmatic API&lt;/strong&gt; to control the Mocha runner and be notified of test successes and failures. Once all tests have been executed, we send the results to the Probe Dock server with our &lt;a href=&quot;https://www.npmjs.com/package/probedock-node&quot;&gt;probedock-node&lt;/a&gt; library. This is the npm module that you should use if you want to integrate Probe Dock in your development workflow and want to have a lot of control and flexibility.&lt;/p&gt;

&lt;p&gt;When you run the command, you should see the following output on your console. Note that two tests are expected to fail (we generate exceptions on purpose).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/2015-10-17-probedock-integration-with-mocha/console-01.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;see-the-test-results-in-probe-dock&quot;&gt;See the test results in Probe Dock&lt;/h3&gt;

&lt;p&gt;If your setup is correct, you should see the test results in the Probe Dock web interface.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/2015-10-17-probedock-integration-with-mocha/server-01.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/2015-10-17-probedock-integration-with-mocha/server-02.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;how-do-all-pieces-fit-together&quot;&gt;How do all pieces fit together?&lt;/h3&gt;

&lt;p&gt;You will find more details about the implementation on our &lt;a href=&quot;https://github.com/probedock/probedock-demo-mocha&quot;&gt;GitHub repo&lt;/a&gt;, but the following diagram should already give you a pretty good idea about how Probe Dock, Mocha and your code base fit together.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/2015-10-17-probedock-integration-with-mocha/architecture.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Hopefully, this article and the companion &lt;a href=&quot;https://github.com/probedock/probedock-demo-mocha&quot;&gt;GitHub repo&lt;/a&gt; have given you a good understanding about what needs to be done in order to post test results from a JavaScript environment. If you are using Mocha, then you can use our code either by invoking our runner script from the command line, or by integrating in your favorite build tool (e.g. Grunt, Gulp).&lt;/p&gt;

&lt;p&gt;If you are using another test framework, it should not be too difficult to adapt our code to your needs. It is almost always about using the test framework to launch a runner, listen to test result events and ask the Probe Dock client to send the results to the server.&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Oct 2015 15:00:00 +0200</pubDate>
        <link>http://probedock.io/blog/howto/2015/10/11/probedock-towards-cd-pipelines/</link>
        <guid isPermaLink="true">http://probedock.io/blog/howto/2015/10/11/probedock-towards-cd-pipelines/</guid>
        
        
        <category>howto</category>
        
      </item>
    
      <item>
        <title>Probe Dock Soft-Shake Schedule</title>
        <description>&lt;p&gt;&lt;a href=&quot;/blog/news/2015/09/01/probedock-at-soft-shake/&quot;&gt;As promised&lt;/a&gt;, here’s the schedule for our Presentation at the &lt;a href=&quot;http://soft-shake.ch/2015/en/&quot;&gt;Soft-Shake 2015&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Presentation:&lt;/strong&gt; Test analytics: exploitez la richesse de vos tests automatisés&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Date:&lt;/strong&gt; October 22nd&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Session:&lt;/strong&gt; Slot 0, room 1, 10:30&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that the session’s start time may yet change.
We will update this post if necessary.&lt;/p&gt;
</description>
        <pubDate>Thu, 08 Oct 2015 15:00:00 +0200</pubDate>
        <link>http://probedock.io/blog/news/2015/10/08/probedock-soft-shake-schedule/</link>
        <guid isPermaLink="true">http://probedock.io/blog/news/2015/10/08/probedock-soft-shake-schedule/</guid>
        
        
        <category>news</category>
        
      </item>
    
      <item>
        <title>Probe Dock v0.1.9 Released</title>
        <description>&lt;p&gt;&lt;strong&gt;Probe Dock v0.1.9&lt;/strong&gt; is now available!
It brings you a &lt;a href=&quot;https://trial.probedock.io/register&quot;&gt;trial version&lt;/a&gt; where anyone can register an account to test Probe Dock.&lt;/p&gt;

&lt;p&gt;Trial accounts are free but time-limited.
They will be reset every week on Sunday.&lt;/p&gt;

&lt;p&gt;Check out our &lt;a href=&quot;http://probedock.io/getting-started/&quot;&gt;Getting Started&lt;/a&gt; page!&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Oct 2015 18:00:00 +0200</pubDate>
        <link>http://probedock.io/blog/releases/2015/10/05/probedock-v0_1_9/</link>
        <guid isPermaLink="true">http://probedock.io/blog/releases/2015/10/05/probedock-v0_1_9/</guid>
        
        
        <category>releases</category>
        
      </item>
    
      <item>
        <title>Probe Dock at the EBU DevCon 2015!</title>
        <description>&lt;p&gt;We will tell the story behind Probe Dock at the &lt;a href=&quot;https://tech.ebu.ch/events/devcon15&quot;&gt;EBU Developer Conference&lt;/a&gt; on October 7! Our session will be at 12:10, and the conference will take place at &lt;a href=&quot;http://maps.google.ch/maps?f=q&amp;amp;source=s_q&amp;amp;hl=en&amp;amp;geocode=&amp;amp;q=european+broadcasting+union&amp;amp;sll=46.205393,6.13555&amp;amp;sspn=0.073776,0.167713&amp;amp;ie=UTF8&amp;amp;hq=european+broadcasting+union&amp;amp;hnear=&amp;amp;ll=46.236378,6.135521&amp;amp;spn=0.070766,0.167713&amp;amp;z=13&amp;amp;iwloc=A&quot;&gt;EBU Headquarters&lt;/a&gt; in Geneva.&lt;/p&gt;

&lt;p&gt;This third EBU Developer Conference will provide an opportunity to learn about best practices in software engineering and get hands-on with current development and deployment tools. Participants will pick up new ideas to run software-driven broadcast infrastructures and to improve their engineering workflows and overall development teams’ organisation.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;DevCon 2015 features keynotes from Cornelius Suermann (PayPal), Bob Uva (New Relic) and Ken Schwaber (Scrum.org).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The conference sessions cover Big Data &amp;amp; Recommendation Systems, Security, Identity Management, DevOps, Distributed Applications, Open Source. Agile Management, Applications for Connected TVs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hands-on Workshops are provided on CPA, D3.js, and Visual Radio and there will be an Agile Clinic, a pitching session and an informal drinks night!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;our-presentation-from-nothing-to-thousands-of-tests&quot;&gt;Our presentation: From nothing to thousands of tests&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;We worked in a startup where over 6 years the technology team grew from 1 to 25 people, and from nothing we built an automated test suite with thousands of tests. We will tell the story of how we used automated testing as a cornerstone of agile methodologies to increase software quality, and how we solved the main issues we encountered: How do you show the value of automated tests to developers and motivate them to write more? How can you write better tests? How can you have a comprehensive view of software quality across components and technologies?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 01 Oct 2015 22:00:00 +0200</pubDate>
        <link>http://probedock.io/blog/news/2015/10/01/probedock-at-ebu-devcon/</link>
        <guid isPermaLink="true">http://probedock.io/blog/news/2015/10/01/probedock-at-ebu-devcon/</guid>
        
        
        <category>news</category>
        
      </item>
    
      <item>
        <title>Probe Dock selected for the CTI Business Concept course</title>
        <description>&lt;p&gt;Probe Dock has been selected as the project our team will work on in the &lt;a href=&quot;http://www.cti-entrepreneurship.ch/en/module-en/business-concept/&quot;&gt;CTI Business Concept course&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For 10 evenings, we will learn to become entrepreneurs. We will have access to numerous resources and &lt;a href=&quot;http://west.cti-entrepreneurship.ch/en/trainers/&quot;&gt;people&lt;/a&gt; to challenge and develop our business idea.&lt;/p&gt;

&lt;p&gt;The Business Concept course is one of four modules offered by the &lt;a href=&quot;https://www.kti.admin.ch/kti/en/home.html&quot;&gt;Commission for Technology and Innovation (CTI)&lt;/a&gt;, a Swiss program for technology startups.&lt;/p&gt;

&lt;h2 id=&quot;about-the-course&quot;&gt;About the course&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Would you like to become an entrepreneur by creating or joining a knowledge- or technology-based start-up company? The “Business Concept” module will teach you how to think and act like an entrepreneur, how to transform an idea into a business concept and gain theoretical and practical expertise to play multiple key roles in a start-up, or to set up you own company.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;content&quot;&gt;Content&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Entrepreneurial thinking&lt;/li&gt;
  &lt;li&gt;Value proposition and service &amp;amp; product development&lt;/li&gt;
  &lt;li&gt;Protection of innovation&lt;/li&gt;
  &lt;li&gt;Business relations with customers&lt;/li&gt;
  &lt;li&gt;Financial planning&lt;/li&gt;
  &lt;li&gt;Financing&lt;/li&gt;
  &lt;li&gt;Building a strong team&lt;/li&gt;
  &lt;li&gt;Presenting your business ideas&lt;/li&gt;
  &lt;li&gt;Start-up ecosystem&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 29 Sep 2015 12:00:00 +0200</pubDate>
        <link>http://probedock.io/blog/news/2015/09/29/probedock-selected-for-the-cti-business-concept-course/</link>
        <guid isPermaLink="true">http://probedock.io/blog/news/2015/09/29/probedock-selected-for-the-cti-business-concept-course/</guid>
        
        
        <category>news</category>
        
      </item>
    
      <item>
        <title>Probe Dock v0.1.8 Released</title>
        <description>&lt;p&gt;&lt;strong&gt;Probe Dock v0.1.8&lt;/strong&gt; is now available!
This version brings you new analytics features and a few UI improvements.&lt;/p&gt;

&lt;p&gt;Read more about what has been improved:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#dashboard&quot;&gt;Dashboard&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#report-details&quot;&gt;Report details&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#projects-list&quot;&gt;Projects list&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#reports-table&quot;&gt;Report table&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;dashboard&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;dashboard&quot;&gt;Dashboard&lt;/h2&gt;

&lt;p&gt;The latest reports widget has been renamed to &lt;em&gt;Recent Activity&lt;/em&gt; and gives much more information about test runs.
In addition to the runner, time and health bar, it now also shows the &lt;strong&gt;project(s)&lt;/strong&gt; and &lt;strong&gt;categories&lt;/strong&gt; of the tests that were run.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/probedock-v0_1_8/dashboard-recent-activity.png&quot; alt=&quot;Dashboard recent activity&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The new tests graph can now be &lt;strong&gt;filtered by project and/or user&lt;/strong&gt;, so you can now which projects have the most tests or who are the most active contributors.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/probedock-v0_1_8/dashboard-new-tests.png&quot; alt=&quot;Dashboard new tests&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;report-details&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;report-details&quot;&gt;Report details&lt;/h2&gt;

&lt;p&gt;With the new report filters, you can display only the results you are interested in:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/probedock-v0_1_8/report-details-filters.png&quot; alt=&quot;Report details filters&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can filter by &lt;strong&gt;category, tags or tickets&lt;/strong&gt;.
Or you can select tests with a name that matches your &lt;strong&gt;search&lt;/strong&gt;.
Finally, toggle buttons allow you to show/hide &lt;strong&gt;passed results, failed results, inactive results, results from existing tests and results of new tests&lt;/strong&gt; (tests that were first seen in this test run).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Note that for now, the doughnut chart indicating the overall status of the test run is not affected by applied filters.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Additionally, the categories of the tests that were run are also shown next to the project(s) under the title:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/probedock-v0_1_8/report-details-categories.png&quot; alt=&quot;Report details categories&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;projects-list&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;projects-list&quot;&gt;Projects list&lt;/h2&gt;

&lt;p&gt;Each project box in the project list now shows a pie chart indicating the &lt;strong&gt;overall status of the last test run&lt;/strong&gt; for that project:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/probedock-v0_1_8/projects-list.png&quot; alt=&quot;Projects list&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;reports-table&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;reports-table&quot;&gt;Reports table&lt;/h2&gt;

&lt;p&gt;The following improvements have been made to the reports table:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;em&gt;Runner(s)&lt;/em&gt; column is now left-aligned.&lt;/li&gt;
  &lt;li&gt;Milliseconds are no longer displayed for durations longer than a minute.&lt;/li&gt;
  &lt;li&gt;The &lt;em&gt;Projects&lt;/em&gt; column has become the &lt;em&gt;Details&lt;/em&gt; column and also indicates the &lt;strong&gt;categories&lt;/strong&gt; of the tests that were run.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/media/probedock-v0_1_8/reports-table.png&quot; alt=&quot;Reports table&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Sep 2015 22:00:00 +0200</pubDate>
        <link>http://probedock.io/blog/releases/2015/09/09/probedock-v0_1_8/</link>
        <guid isPermaLink="true">http://probedock.io/blog/releases/2015/09/09/probedock-v0_1_8/</guid>
        
        
        <category>releases</category>
        
      </item>
    
      <item>
        <title>Probe Dock at the Soft-Shake 2015!</title>
        <description>&lt;p&gt;The &lt;a href=&quot;http://soft-shake.ch/2015/en/&quot;&gt;Soft-Shake&lt;/a&gt; is a multi-disciplinary conference offering a varied range of tracks and topics of interest to the IT community, such as (from last year’s edition):&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Agile&lt;/li&gt;
  &lt;li&gt;Java&lt;/li&gt;
  &lt;li&gt;Microsoft&lt;/li&gt;
  &lt;li&gt;Web technologies&lt;/li&gt;
  &lt;li&gt;Mobile development&lt;/li&gt;
  &lt;li&gt;Big Data &amp;amp; no SQL&lt;/li&gt;
  &lt;li&gt;Functional programming&lt;/li&gt;
  &lt;li&gt;Ruby&lt;/li&gt;
  &lt;li&gt;Gamification&lt;/li&gt;
  &lt;li&gt;AI/Robotics&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We will present Probe Dock in the Agile track of this year’s conference on October 22-23!
The title of our presentation is: &lt;strong&gt;Test analytics: exploitez la richesse de vos tests automatisés&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;We’ll give a more precise date and time when the final conference schedule is published on September 13.
The conference will take place at &lt;a href=&quot;http://hepia.hesge.ch&quot;&gt;Hepia&lt;/a&gt; in Geneva.&lt;/p&gt;
</description>
        <pubDate>Tue, 01 Sep 2015 23:00:00 +0200</pubDate>
        <link>http://probedock.io/blog/news/2015/09/01/probedock-at-soft-shake/</link>
        <guid isPermaLink="true">http://probedock.io/blog/news/2015/09/01/probedock-at-soft-shake/</guid>
        
        
        <category>news</category>
        
      </item>
    
      <item>
        <title>Probe Dock v0.1.7 Released</title>
        <description>&lt;p&gt;&lt;strong&gt;Probe Dock v0.1.7&lt;/strong&gt; is now available!
This version brings you two new features:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;As an organization admin, you can create &lt;a href=&quot;#technical-users&quot;&gt;technical users&lt;/a&gt; for continuous integration environments.&lt;/li&gt;
  &lt;li&gt;As a new user, you can &lt;a href=&quot;#user-registration&quot;&gt;register an account and create an organization&lt;/a&gt; to try Probe Dock.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We’ve also done a lot of work to support new test frameworks, bringing you the following:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/probedock/probedock-grunt-jasmine&quot;&gt;New Jasmine (with Grunt.js) probe&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/probedock/probedock-karma&quot;&gt;New Karma probe&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/probedock/probedock-itf&quot;&gt;New Java ITF probe&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;New &lt;a href=&quot;#probe-libraries&quot;&gt;probe development libraries&lt;/a&gt; are available to develop probes for Node.js and Ruby, as well as Grunt.js plugins.&lt;/p&gt;

&lt;p&gt;Also check out the other &lt;a href=&quot;#improvements-fixes&quot;&gt;improvements &amp;amp; bug fixes&lt;/a&gt; we’ve made.&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;technical-users&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;technical-users&quot;&gt;Technical users&lt;/h2&gt;

&lt;p&gt;When publishing test results to Probe Dock from a continuous integration environment,
integration managers do not want to use their personal Probe Dock credentials to authenticate,
as that would link all tests run from that environment to their user.
A &lt;em&gt;technical&lt;/em&gt; user is needed, which is not a human user but is authorized to publish test results.&lt;/p&gt;

&lt;p&gt;When adding a new member to your organization in Probe Dock,
you can now choose whether to add a standard user or a technical user:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/probedock-v0_1_7/technical-user-form.png&quot; alt=&quot;Technical user form&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Your technical users will be listed in the Members page of your organization.
A button in each technical user’s box allows you to easily generate an authentication token for that user:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/probedock-v0_1_7/technical-users-listing.png&quot; alt=&quot;Technical users listing&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;user-registration&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;user-registration&quot;&gt;User registration&lt;/h2&gt;

&lt;p&gt;Anyone can now register to try out Probe Dock!
The new Register button is available in the menu bar when not logged in:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/probedock-v0_1_7/user-registration-button.png&quot; alt=&quot;User registration button&quot; /&gt;&lt;/p&gt;

&lt;p&gt;This feature can be enabled or disabled by the admin of each Probe Dock server by accessing the Settings page in the Admin menu:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/probedock-v0_1_7/user-registration-setting.png&quot; alt=&quot;User registration setting&quot; /&gt;&lt;/p&gt;

&lt;h2 id=&quot;new-probes&quot;&gt;New probes&lt;/h2&gt;

&lt;p&gt;&lt;a name=&quot;jasmine-grunt-probe&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;jasmine-grunt-probe&quot;&gt;Jasmine (Grunt) probe&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/media/probedock-v0_1_7/jasmine.png&quot; width=&quot;200&quot; alt=&quot;Jasmine logo&quot; style=&quot;float:right;margin-left:1em;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Publish test results from your &lt;a href=&quot;http://jasmine.github.io&quot;&gt;Jasmine&lt;/a&gt; test suite with &lt;a href=&quot;http://gruntjs.com&quot;&gt;Grunt.js&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;Check it out on GitHub: &lt;a href=&quot;https://github.com/probedock/probedock-grunt-jasmine&quot;&gt;probedock-grunt-jasmine&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br style=&quot;clear:both;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;karma-probe&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;karma-probe&quot;&gt;Karma probe&lt;/h3&gt;

&lt;p&gt;&lt;img src=&quot;/media/probedock-v0_1_7/karma.png&quot; width=&quot;200&quot; alt=&quot;Karma logo&quot; style=&quot;float:right;margin-left:1em;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Publish test results from your &lt;a href=&quot;http://karma-runner.github.io/0.13/index.html&quot;&gt;Karma&lt;/a&gt; test suite!&lt;/p&gt;

&lt;p&gt;Check it out on GitHub: &lt;a href=&quot;https://github.com/probedock/probedock-karma&quot;&gt;probedock-karma&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;br style=&quot;clear:both;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;java-itf-probe&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;java-itf-probe&quot;&gt;Java ITF probe&lt;/h3&gt;

&lt;p&gt;Publish test results from your &lt;a href=&quot;https://github.com/probedock/jee-itf&quot;&gt;Java ITF&lt;/a&gt; test suite!&lt;/p&gt;

&lt;p&gt;Check it out on GitHub: &lt;a href=&quot;https://github.com/probedock/probedock-itf&quot;&gt;probedock-itf&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;probe-libraries&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&quot;development-libraries&quot;&gt;Development libraries&lt;/h3&gt;

&lt;p&gt;The following libraries have been released, making the development of new probes easier:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/probedock/probedock-ruby&quot;&gt;probedock-ruby&lt;/a&gt; for the &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt; language&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/probedock/probedock-node&quot;&gt;probedock-node&lt;/a&gt; for the &lt;a href=&quot;https://nodejs.org&quot;&gt;Node.js&lt;/a&gt; language&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://github.com/probedock/probedock-grunt&quot;&gt;probedock-grunt&lt;/a&gt; for &lt;a href=&quot;http://gruntjs.com&quot;&gt;Grunt.js&lt;/a&gt; plugins&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;improvements-fixes&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;other-improvements--bug-fixes&quot;&gt;Other improvements &amp;amp; bug fixes&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Registration and invite e-mails are sent asynchronously to avoid long loading times when registering or inviting a new member.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;BUGFIX:&lt;/strong&gt; fixed the uniqueness validation of project names which now correctly allows duplicate project names as long as they are in different organizations.&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;BUGFIX:&lt;/strong&gt; fixed the pagination controls of the users table that were not showing (visible only to Probe Dock admins).&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Wed, 26 Aug 2015 22:00:00 +0200</pubDate>
        <link>http://probedock.io/blog/releases/2015/08/26/probedock-v0_1_7/</link>
        <guid isPermaLink="true">http://probedock.io/blog/releases/2015/08/26/probedock-v0_1_7/</guid>
        
        
        <category>releases</category>
        
      </item>
    
      <item>
        <title>Welcome to Probe Dock!</title>
        <description>&lt;p&gt;Probe Dock takes a new stand on software quality. It collects the results of tests performed on all system components (mobile, cloud, etc). The data, gathered in vast amounts, is analyzed to offer insights to developers, product owners and QA managers.&lt;/p&gt;

&lt;p&gt;We will use this blog to keep you informed of Probe Dock news and releases.&lt;/p&gt;
</description>
        <pubDate>Wed, 19 Aug 2015 16:00:00 +0200</pubDate>
        <link>http://probedock.io/blog/news/2015/08/19/welcome-to-probedock/</link>
        <guid isPermaLink="true">http://probedock.io/blog/news/2015/08/19/welcome-to-probedock/</guid>
        
        
        <category>news</category>
        
      </item>
    
  </channel>
</rss>
