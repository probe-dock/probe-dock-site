<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Probe Dock</title>
    <description>ProbeDock is a test tracking and analysis tool.
</description>
    <link>http://probedock.io/</link>
    <atom:link href="http://probedock.io/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 17 Dec 2015 13:55:41 +0100</pubDate>
    <lastBuildDate>Thu, 17 Dec 2015 13:55:41 +0100</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Integrating Probe Dock and Probe Dock RT into a Java EE project</title>
        <description>&lt;p&gt;When you build a Java EE project, you can use a variety of automated tests. Unit tests, integration tests, tests for your REST API. It is also quite common to have functional tests for the web user interface.&lt;/p&gt;

&lt;p&gt;We have prepared a full stack Java EE demo project where you can discover step by step how to integrate multiple test technologies with Probe Dock.&lt;/p&gt;

&lt;h3 id=&quot;system-under-test&quot;&gt;System under test&lt;/h3&gt;

&lt;p&gt;The &lt;strong&gt;system&lt;/strong&gt; under test is an object-oriented calculator with four operations: &lt;code&gt;div&lt;/code&gt;, &lt;code&gt;sub&lt;/code&gt;, &lt;code&gt;mul&lt;/code&gt; and &lt;code&gt;add&lt;/code&gt;. Its REST API offers a simple language to express more complex operation (e.g. &lt;code&gt;(2 + (3 - 1))&lt;/code&gt;).&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://github.com/probedock/probedock-demo-jee-stack/tree/master/probedock-demo-jee-stack-notest&quot;&gt;demo project (without tests)&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Here’s a sample payload for the REST API.
It represents the calculation &lt;code&gt;2 + (10 - ((15 / 3) * 4))&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;add&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;left&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;rightOperation&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;sub&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;left&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
    &lt;span class=&quot;nt&quot;&gt;&amp;quot;rightOperation&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;mul&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;quot;leftOperation&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;type&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;div&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;left&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;15&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt;
        &lt;span class=&quot;nt&quot;&gt;&amp;quot;right&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;
      &lt;span class=&quot;p&quot;&gt;},&lt;/span&gt;
      &lt;span class=&quot;nt&quot;&gt;&amp;quot;right&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;
    &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Submitting this payload with a POST request on &lt;code&gt;http://localhost:8080/jee-stack/api/calculator&lt;/code&gt; will yield the following result:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-json&quot; data-lang=&quot;json&quot;&gt;&lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;nt&quot;&gt;&amp;quot;result&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;-8&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;unit-tests&quot;&gt;Unit tests&lt;/h3&gt;

&lt;p&gt;In the &lt;a href=&quot;https://github.com/probedock/probedock-demo-jee-stack/tree/master/probedock-demo-jee-stack-unit&quot;&gt;probedock-demo-jee-stack-unit&lt;/a&gt; project, we added JUnit tests as the first test technology in our stack. We have already integrated Probe Dock and Probe Dock RT into this project. Go through the README to see exactly what we did.&lt;/p&gt;

&lt;p&gt;This is a short summary of modifications compared to the initial project without tests:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Added Probe Dock and test dependencies&lt;/li&gt;
  &lt;li&gt;Configured Maven Surefire plugin for Probe Dock&lt;/li&gt;
  &lt;li&gt;Wrote a few unit tests with JUnit&lt;/li&gt;
  &lt;li&gt;Added the &lt;code&gt;probedock.yml&lt;/code&gt; project configuration file&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;integration-tests&quot;&gt;Integration tests&lt;/h3&gt;

&lt;p&gt;In the &lt;a href=&quot;https://github.com/probedock/probedock-demo-jee-stack/tree/master/probedock-demo-jee-stack-integration&quot;&gt;probedock-demo-jee-stack-integration&lt;/a&gt; project, we introduced integration tests with &lt;a href=&quot;http://arquillian.org&quot;&gt;Arquillian&lt;/a&gt; in addition to unit tests.&lt;/p&gt;

&lt;p&gt;Arquillian is a Java EE test framework which runs the tests in a lightweight application container where all Java EE components are managed as you are used to.&lt;/p&gt;

&lt;p&gt;This is a summary of modifications compared to the initial project, including the previous setup of the unit tests:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Added Probe Dock and test (JUnit, Arquillian, …) dependencies&lt;/li&gt;
  &lt;li&gt;Added the dependency management configuration for Arquillian for the version management&lt;/li&gt;
  &lt;li&gt;Configured Maven Surefire plugin for Probe Dock&lt;/li&gt;
  &lt;li&gt;Added several configuration files required by Arquillian&lt;/li&gt;
  &lt;li&gt;We have written a few integration tests with JUnit and added the required annotations and methods for Arquillian. Each test class will have the responsibility to create its own archive to be run by Arquillian.&lt;/li&gt;
  &lt;li&gt;Added the &lt;code&gt;probedock.yml&lt;/code&gt; project configuration file&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;api-tests&quot;&gt;API tests&lt;/h3&gt;

&lt;p&gt;In the &lt;a href=&quot;https://github.com/probedock/probedock-demo-jee-stack/tree/master/probedock-demo-jee-stack-api&quot;&gt;probedock-demo-jee-stack-api&lt;/a&gt; project, we introduced API tests. We used &lt;a href=&quot;https://github.com/probedock/java-api-test&quot;&gt;java-api-test&lt;/a&gt; to write our API tests.&lt;/p&gt;

&lt;p&gt;The test framework offers an abstraction to make JSON requests on a REST API. It also provides utility methods to make assertions on JSON responses.&lt;/p&gt;

&lt;p&gt;We have also used another library to manage data through JPA: &lt;a href=&quot;https://github.com/probedock/junitee-data-utils&quot;&gt;junitee-data-utils&lt;/a&gt;. This library allows us to populate data through code in the test setup phase.&lt;/p&gt;

&lt;p&gt;With Arquillian, there are two modes to run the tests: the server mode and the client mode. We use the server mode for integration tests, and the client mode for API tests. In the client mode, the tests are run &lt;em&gt;outside&lt;/em&gt; of the application context. Therefore, we cannot inject services in tests directly as they are not managed.&lt;/p&gt;

&lt;p&gt;This is a summary of modifications compared to the initial project, including the previous setups of the unit and integration tests:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Added Probe Dock and test (JUnit, java-api-test, …) dependencies&lt;/li&gt;
  &lt;li&gt;Added the dependency management configuration for Arquillian for the version management&lt;/li&gt;
  &lt;li&gt;Configured Maven Surefire plugin for Probe Dock&lt;/li&gt;
  &lt;li&gt;Added several configuration files required by Arquillian&lt;/li&gt;
  &lt;li&gt;We have written a few integration tests with JUnit and added the required annotations and methods for Arquillian. Each test class will have the responsibility to create its own archive to be run by Arquillian. In client mode, we also benefit from some injections like the URL where the application is running by Arquillian.&lt;/li&gt;
  &lt;li&gt;Added the &lt;code&gt;probedock.yml&lt;/code&gt; project configuration file&lt;/li&gt;
  &lt;li&gt;Added the configuration and code to integrate junitee-data-utils&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;rule-them-all&quot;&gt;Rule them all&lt;/h3&gt;

&lt;p&gt;Finally, we bring all these pieces together. The project &lt;a href=&quot;https://github.com/probedock/probedock-demo-jee-stack/tree/master/probedock-demo-jee-stack-all&quot;&gt;probedock-demo-jee-stack-all&lt;/a&gt; contains the three kinds of tests and a way to run each of them separately or all together.&lt;/p&gt;

&lt;p&gt;We performed the following steps to have all tests running correctly:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;We have combined all the tests into the same project:
    &lt;ul&gt;
      &lt;li&gt;We have the standard packages for unit tests.&lt;/li&gt;
      &lt;li&gt;We have the &lt;code&gt;integration&lt;/code&gt; package for the integration tests.&lt;/li&gt;
      &lt;li&gt;We have the &lt;code&gt;api&lt;/code&gt; package for the API tests.&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;We combined the different configuration files.&lt;/li&gt;
  &lt;li&gt;We have added the probedock project configuration file with the correct categories by package to make sure integration and API tests are assigned the correct category in Probe Dock.&lt;/li&gt;
  &lt;li&gt;We have tuned the Maven Surefire plugin configuration to run only the unit tests by default when running the command &lt;code&gt;mvn clean install&lt;/code&gt;.&lt;/li&gt;
  &lt;li&gt;We added three maven profiles with custom Maven Surefire configurations:
    &lt;ul&gt;
      &lt;li&gt;&lt;code&gt;integration&lt;/code&gt; to run only integration tests with &lt;code&gt;mvn clean install -Pintegration&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;api&lt;/code&gt; to run only API tests tests with &lt;code&gt;mvn clean install -Papi&lt;/code&gt;&lt;/li&gt;
      &lt;li&gt;&lt;code&gt;all&lt;/code&gt; to run all tests at once with &lt;code&gt;mvn clean install -Pall&lt;/code&gt;&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Hopefully, this article and the companion &lt;a href=&quot;https://github.com/probedock/probedock-demo-jee-stack&quot;&gt;GitHub repo&lt;/a&gt; have given you a good understanding of what needs to be done in order to integrate different test technologies in a Java EE application. Use our demo project to learn how to integrate Probe Dock into your Java EE projects or any Java application with JUnit-based testing.&lt;/p&gt;

&lt;p&gt;If you use other test frameworks based on JUnit, they will be supported out of the box by the &lt;a href=&quot;https://github.com/probedock/probedock-junit&quot;&gt;Probe Dock JUnit probe&lt;/a&gt;. You simply need to add the listener in the Maven Surefire plugin configuration.&lt;/p&gt;
</description>
        <pubDate>Thu, 17 Dec 2015 15:00:00 +0100</pubDate>
        <link>http://probedock.io/blog/howto/2015/12/17/probedock-javaee-demo/</link>
        <guid isPermaLink="true">http://probedock.io/blog/howto/2015/12/17/probedock-javaee-demo/</guid>
        
        
        <category>howto</category>
        
      </item>
    
      <item>
        <title>Probe Dock is awarded a FIT grant to accelerate innovation in agile testing</title>
        <description>&lt;p&gt;It is a pleasure and a pride for us to announce that Probe Dock has just been awarded a prestigious innovation grant by the Foundation for Technological Innovation (&lt;a href=&quot;http://www.fondation-fit.ch/&quot;&gt;FIT&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;This financial support will allow us to accelerate the development of what we believe is a truly original agile testing platform. In collaboration with the University of Applied Sciences of Western Switzerland, we will be working hard to make progress towards our long-term vision.&lt;/p&gt;

&lt;h3 id=&quot;a-software-quality-platform-crafted-for-agile-teams&quot;&gt;A software quality platform crafted for agile teams&lt;/h3&gt;

&lt;p&gt;For a very long time, software development and quality assurance have been managed as separate and sequential activities, carried out by different teams. It is now generally accepted that quality should not be assessed after the fact. In the contrary, it should be baked into the product and under the responsibility of a single team working closely together.&lt;/p&gt;

&lt;p&gt;Despite this awareness, the reality is that most testing tools and QA platforms have not addressed this paradigm shift. They have been designed under the premise that quality should be &lt;em&gt;controlled externally&lt;/em&gt;. They have not been designed to provide information and feedback directly to the team, on a continuous basis. To make a blunt statement, they support the vision that software development should be managed with a &lt;em&gt;Command and Control (and Punish)&lt;/em&gt; philosophy.&lt;/p&gt;

&lt;p&gt;Probe Dock takes a new stand on software quality. From its inception, the platform has been created to address the needs of agile teams. More fundamentally, it has been designed to foster agile values:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;feedback and transparency&lt;/li&gt;
  &lt;li&gt;introspection and continuous improvement&lt;/li&gt;
  &lt;li&gt;courage and pride&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Our goal is to offer a platform to agile, multi-disciplinary teams that support their continuous improvement process, by providing them with detailed feedback in original ways. Our goal is to provide them with insights not only about the quality of their product, but also about the efficiency of their engineering and collaborative practices.&lt;/p&gt;

&lt;h3 id=&quot;the-road-ahead&quot;&gt;The road ahead&lt;/h3&gt;

&lt;p&gt;The first step towards our vision for Probe Dock has been to offer an efficient and uniform way to collect test reports, across system components, technologies and build environments.&lt;/p&gt;

&lt;p&gt;Today, we have a solution that makes it easier to deal with the data generated by heterogenous testing frameworks. No need to chase test reports in different places. No more struggle to extract information from many diverse report formats. Probe Dock makes it a breeze to place probes in your existing projects, to collect normalized reports in a central location and to get insights from quality dashboards.&lt;/p&gt;

&lt;p&gt;The vast amount of information continuously collected by the probes truly is a gold mine. Our vision for Probe Dock is to exploit it, with the objective to provide new insights to development teams. With this in mind, we are actively developing Probe Dock on a number of different fronts. While this is not the place to describe our roadmap in details, we can mention three areas where you can expect to hear more from us in the coming months : &lt;em&gt;deep analytics&lt;/em&gt;, &lt;em&gt;gamification&lt;/em&gt; and &lt;em&gt;ambient interfaces&lt;/em&gt;.&lt;/p&gt;

</description>
        <pubDate>Thu, 19 Nov 2015 14:00:00 +0100</pubDate>
        <link>http://probedock.io/blog/roadmap/2015/11/19/fitGrant/</link>
        <guid isPermaLink="true">http://probedock.io/blog/roadmap/2015/11/19/fitGrant/</guid>
        
        
        <category>roadmap</category>
        
      </item>
    
      <item>
        <title>Using Probe Dock with Jasmine 2</title>
        <description>&lt;p&gt;Are you using Jasmine 2 and do you want to send your test results to Probe Dock?&lt;/p&gt;

&lt;p&gt;In a &lt;a href=&quot;/blog/howto/2015/10/11/probedock-integration-with-mocha/&quot;&gt;previous post&lt;/a&gt;, we have shown how the &lt;a href=&quot;https://www.npmjs.com/package/probedock-node&quot;&gt;probedock-node&lt;/a&gt; npm module can be used to send test results to the Probe Dock server in a JavaScript environment. To illustrate the process, we have shown what you need to do if you are using the Mocha framework. You can grab the code in &lt;a href=&quot;https://github.com/probedock/probedock-demo-mocha&quot;&gt;this GitHub repo&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;We have now done the same thing for Jasmine2. If you are using this framework to write your tests, you will see that you can very easily collect the results (using a custom reporter), prepare a test run payload and send it to the Probe Dock server. For the details, have a look in &lt;a href=&quot;https://github.com/probedock/probedock-demo-jasmine2&quot;&gt;this repo&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/2015-10-24-probedock-with-jasmine2/server-01.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 24 Oct 2015 15:00:00 +0200</pubDate>
        <link>http://probedock.io/blog/roadmap/2015/10/24/probedock-with-jasmine2/</link>
        <guid isPermaLink="true">http://probedock.io/blog/roadmap/2015/10/24/probedock-with-jasmine2/</guid>
        
        
        <category>roadmap</category>
        
      </item>
    
      <item>
        <title>Probe Dock Soft-Shake Presentation</title>
        <description>&lt;p&gt;We presented Probe Dock at &lt;a href=&quot;http://soft-shake.ch/2015/en/&quot;&gt;the Soft-Shake 2015&lt;/a&gt; this morning.
It went very well and we got interesting questions and feedback.
Thanks to all attendees and of course to the conference sponsors and organizers!&lt;/p&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://www.dropbox.com/s/krwp0gowh57t7xa/Soft-Shake%202015%20-%20Test%20analytics%20presentation.pdf?dl=0&quot;&gt;slides we used for the presentation&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As always, do not hesitate to contact us if you have additional questions or feedback.&lt;/p&gt;

&lt;h2 id=&quot;q--a-after-the-presentation&quot;&gt;Q &amp;amp; A after the presentation&lt;/h2&gt;

&lt;p&gt;&lt;strong&gt;Does Probe Dock include code coverage information?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Not at this time but it’s clearly something that we plan to add.
We can obtain code coverage metrics through integrations with other tools (e.g. Sonar, Coveralls), that we will analyze and correlate with other test data.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Does Probe Dock display information about the machine/environment on which the tests are executed?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;We already collect this information but don’t have it in the UI yet.
It’s definitely information that will be useful to help solve &lt;em&gt;“Works on my machine”&lt;/em&gt; kinds of problems.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Can Probe Dock show a build matrix (i.e. when tests are executed multiple times on different combinations of OS, browser, dependency versions, etc)?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Probe Dock can collect the results of a build matrix in a report, but it currently won’t collect information about the matrix itself.
A limited workaround at this time is to use tags to differentiate between the test results of each execution.
Including more advanced build matrix features is on our roadmap but not necessarily a priority right now&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;How can Probe Dock differentiate between the different components of my big project?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The current Probe Dock model allows you to manage &lt;em&gt;projects&lt;/em&gt;.
Each Probe Dock project might correspond to an entire project or yours, or to only one component in your project.
You can organize them as you see fit and decide what goes into each report.&lt;/p&gt;

&lt;p&gt;We have been discussing more advanced project/component models that will provide more flexibility, but nothing definite has been decided yet.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Jenkins can also display automated test reports. What does Probe Dock offer that Jenkins doesn’t already have?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Jenkins does have the ability to display test results in a report, but little more,
and it is very much Java/Maven-oriented whereas Probe Dock aims to support any testing framework that has listeners (most of them do).&lt;/p&gt;

&lt;p&gt;Probe Dock also tracks individual tests over time,
allows developers to enrich tests with custom data freely defined by you (tags &amp;amp; tickets),
and tracks day-to-day developer activity in addition to continuous integration pipelines.&lt;/p&gt;

&lt;p&gt;Its goal is to offer many more insights into testing trends and team behavior,
and to correlate the data of testing activities with other data such as test coverage and bug reports.&lt;/p&gt;
</description>
        <pubDate>Thu, 22 Oct 2015 22:00:00 +0200</pubDate>
        <link>http://probedock.io/blog/news/2015/10/22/probedock-soft-shake-presentation/</link>
        <guid isPermaLink="true">http://probedock.io/blog/news/2015/10/22/probedock-soft-shake-presentation/</guid>
        
        
        <category>news</category>
        
      </item>
    
      <item>
        <title>Integrating Probe Dock with Mocha</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://mochajs.org/&quot;&gt;Mocha&lt;/a&gt; is one of the most popular JavaScript testing frameworks. We have integrated it with Probe Dock, so that test results can be collected and analyzed via our web interface.&lt;/p&gt;

&lt;p&gt;Mocha provides a lot of very nice features, which make testing efficient and enjoyable. The framework allows you to test both server-side and client-side components. It supports asynchronous tests, custom reporters and much more.&lt;/p&gt;

&lt;p&gt;To illustrate how Probe Dock can be integrated with existing testing frameworks, we have implemented a reference project where automated tests are written and executed with Mocha and where test results are sent to Probe Dock.&lt;/p&gt;

&lt;p&gt;Have a look at &lt;a href=&quot;https://github.com/probedock/probedock-demo-mocha&quot;&gt;this GitHub repo&lt;/a&gt; to see the result and get access to our Mocha runner. If you are using this framework, you will be able to collect your test results and feed them in your Probe Dock server.&lt;/p&gt;

&lt;h3 id=&quot;what-is-our-system-under-test&quot;&gt;What is our System-Under-Test?&lt;/h3&gt;

&lt;p&gt;In this demo, we consider &lt;strong&gt;two different systems&lt;/strong&gt; that we want to validate with our Mocha tests:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;the first one is &lt;strong&gt;a very simple Node.js module&lt;/strong&gt;, which exposes two functions. We are going to check that the functions return values of the expected type.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;the second one is &lt;strong&gt;a fictive distributed application&lt;/strong&gt; (with a front-end, a back-end, etc.). There is actually no code at all: we only want to show that with Mocha, it is possible to recursively define test suites within test suites.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Here is the code of the node module that we will test:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * This is the first System-Under-Test for our demo. It is a &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * very basic node module, which exposes two functions. They&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * both return a string value. The first function is synchronous,&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * the second one is asynchronous.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doSomething&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;sweet&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;exports&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doSomethingAsynchronously&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;setTimeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;cool&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;},&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;write-tests-with-mocha&quot;&gt;Write tests with Mocha&lt;/h3&gt;

&lt;p&gt;Writing tests with Mocha is easy. You declare &lt;strong&gt;test suites&lt;/strong&gt; by calling the &lt;code&gt;describe&lt;/code&gt; function. You then declare &lt;strong&gt;individual tests&lt;/strong&gt; by calling the &lt;code&gt;it&lt;/code&gt; function. In the callback function that you pass to &lt;code&gt;it&lt;/code&gt;, you invoke the System-Under-Test (e.g. you make calls to your Node.js module) and then make assertions on the provided results.&lt;/p&gt;

&lt;p&gt;Here is the test suite for validating the behavior of our simple Node.js module:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Let&amp;#39;s use the standard node.js module &amp;quot;assert&amp;quot; for making assertions. &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * We could use a richer framework, such as should.js or chai.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;assert&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Load the code that we want to test. It is a simple node module, &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * which exposes two functions.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;../app/index.js&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Create a test suite for our &amp;quot;app&amp;quot; node module.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;app&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;	 * Within the module test suite, create a test suite for &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;	 * the &amp;quot;doSomething()&amp;quot; function&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;	 */&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;doSomething&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

		&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;		 * Define a first test for the function&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;		 */&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;shouldReturnAString&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;string&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

		&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;		 * Define a second test for the function&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;		 */&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;shouldReturnSweet&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doSomething&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;sweet&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

	&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;	 * Within the module test suite, create a test suite for the &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;	 * &amp;quot;doSomethingAsynchronously()&amp;quot; function.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;	 */&lt;/span&gt;
	&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;doSomethingAsynchronously&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;shouldReturnCool&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
			&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;timeout&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;doSomethingAsynchronously&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;cool&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;result&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;nx&quot;&gt;done&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;();&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And here is the test suite for validating the behavior of our fictive distributed application:&lt;/p&gt;

&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-javascript&quot; data-lang=&quot;javascript&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Let&amp;#39;s use the standard node.js module &amp;quot;assert&amp;quot; for making assertions. We&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * could use a richer framework, such as should.js or chai.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;assert&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;


&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Create a test suite for a distributed application, composed of several&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * sub-systems. This shows how test suites can be nested in multiple levels.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;A distributed application&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The backend sub-system&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;

		&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The REST API&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	
			&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;should work&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{});&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

		&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The business services&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	
			&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;should work&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{});&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

		&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The data access layer&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	
			&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;should work&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
				&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;Error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;Technical error while talking to the database.&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

	&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The front-end sub-system&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The admin interface&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	
			&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The monitoring pages&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	
				&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;should work&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{});&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The configuration pages&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	
				&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;should work&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{});&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
		&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The end-user interface&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	
			&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The account pages&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	
				&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;should work&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;
					&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;hasWorked&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
					&lt;span class=&quot;nx&quot;&gt;assert&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;equal&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;hasWorked&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
				&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
			&lt;span class=&quot;nx&quot;&gt;describe&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;The fun pages&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt;	
				&lt;span class=&quot;nx&quot;&gt;it&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&amp;quot;should work&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{});&lt;/span&gt;
			&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
		&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;
	&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;

&lt;span class=&quot;p&quot;&gt;});&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&quot;configure-your-probe-dock-environment&quot;&gt;Configure your Probe Dock environment&lt;/h3&gt;

&lt;p&gt;To use Probe Dock, you can install your own server. You can also get a free trial account on our SaaS platform. You will find all details on &lt;a href=&quot;http://probedock.io/getting-started/&quot;&gt;this page&lt;/a&gt;. After registration, you will get &lt;strong&gt;credentials&lt;/strong&gt; that you will need to store in a local configuration file (see below).&lt;/p&gt;

&lt;p&gt;Once you have access to a server, you will also need to &lt;strong&gt;create a new Probe Dock project&lt;/strong&gt; and get its &lt;strong&gt;API key&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Finally, you will need to make sure that &lt;strong&gt;two configuration files&lt;/strong&gt; are properly setup on your machine. Firstly, in &lt;code&gt;~/.probedock/probedock.yml&lt;/code&gt;, you will need to enter the URL of your server and your user credentials. Secondly, in your project folder, you will need a &lt;code&gt;probedock.yml&lt;/code&gt; file with the API key of your project.&lt;/p&gt;

&lt;h3 id=&quot;run-the-tests&quot;&gt;Run the tests&lt;/h3&gt;

&lt;p&gt;To run the tests, use this command: &lt;code&gt;node probedock-mocha-runner.js&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;In our implementation, we have used the &lt;strong&gt;Mocha programmatic API&lt;/strong&gt; to control the Mocha runner and be notified of test successes and failures. Once all tests have been executed, we send the results to the Probe Dock server with our &lt;a href=&quot;https://www.npmjs.com/package/probedock-node&quot;&gt;probedock-node&lt;/a&gt; library. This is the npm module that you should use if you want to integrate Probe Dock in your development workflow and want to have a lot of control and flexibility.&lt;/p&gt;

&lt;p&gt;When you run the command, you should see the following output on your console. Note that two tests are expected to fail (we generate exceptions on purpose).&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/2015-10-17-probedock-integration-with-mocha/console-01.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;see-the-test-results-in-probe-dock&quot;&gt;See the test results in Probe Dock&lt;/h3&gt;

&lt;p&gt;If your setup is correct, you should see the test results in the Probe Dock web interface.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/2015-10-17-probedock-integration-with-mocha/server-01.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/2015-10-17-probedock-integration-with-mocha/server-02.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;how-do-all-pieces-fit-together&quot;&gt;How do all pieces fit together?&lt;/h3&gt;

&lt;p&gt;You will find more details about the implementation on our &lt;a href=&quot;https://github.com/probedock/probedock-demo-mocha&quot;&gt;GitHub repo&lt;/a&gt;, but the following diagram should already give you a pretty good idea about how Probe Dock, Mocha and your code base fit together.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/2015-10-17-probedock-integration-with-mocha/architecture.png&quot; alt=&quot;image&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;conclusion&quot;&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Hopefully, this article and the companion &lt;a href=&quot;https://github.com/probedock/probedock-demo-mocha&quot;&gt;GitHub repo&lt;/a&gt; have given you a good understanding about what needs to be done in order to post test results from a JavaScript environment. If you are using Mocha, then you can use our code either by invoking our runner script from the command line, or by integrating in your favorite build tool (e.g. Grunt, Gulp).&lt;/p&gt;

&lt;p&gt;If you are using another test framework, it should not be too difficult to adapt our code to your needs. It is almost always about using the test framework to launch a runner, listen to test result events and ask the Probe Dock client to send the results to the server.&lt;/p&gt;
</description>
        <pubDate>Sun, 11 Oct 2015 15:00:00 +0200</pubDate>
        <link>http://probedock.io/blog/howto/2015/10/11/probedock-integration-with-mocha/</link>
        <guid isPermaLink="true">http://probedock.io/blog/howto/2015/10/11/probedock-integration-with-mocha/</guid>
        
        
        <category>howto</category>
        
      </item>
    
      <item>
        <title>Probe Dock Soft-Shake Schedule</title>
        <description>&lt;p&gt;&lt;a href=&quot;/blog/news/2015/09/01/probedock-at-soft-shake/&quot;&gt;As promised&lt;/a&gt;, here’s the schedule for our Presentation at the &lt;a href=&quot;http://soft-shake.ch/2015/en/&quot;&gt;Soft-Shake 2015&lt;/a&gt;.&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;strong&gt;Presentation:&lt;/strong&gt; Test analytics: exploitez la richesse de vos tests automatisés&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Date:&lt;/strong&gt; October 22nd&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;Session:&lt;/strong&gt; Slot 0, room 1, 10:30&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Note that the session’s start time may yet change.
We will update this post if necessary.&lt;/p&gt;
</description>
        <pubDate>Thu, 08 Oct 2015 15:00:00 +0200</pubDate>
        <link>http://probedock.io/blog/news/2015/10/08/probedock-soft-shake-schedule/</link>
        <guid isPermaLink="true">http://probedock.io/blog/news/2015/10/08/probedock-soft-shake-schedule/</guid>
        
        
        <category>news</category>
        
      </item>
    
      <item>
        <title>Probe Dock v0.1.9 Released</title>
        <description>&lt;p&gt;&lt;strong&gt;Probe Dock v0.1.9&lt;/strong&gt; is now available!
It brings you a &lt;a href=&quot;https://trial.probedock.io/register&quot;&gt;trial version&lt;/a&gt; where anyone can register an account to test Probe Dock.&lt;/p&gt;

&lt;p&gt;Trial accounts are free but time-limited.
They will be reset every week on Sunday.&lt;/p&gt;

&lt;p&gt;Check out our &lt;a href=&quot;http://probedock.io/getting-started/&quot;&gt;Getting Started&lt;/a&gt; page!&lt;/p&gt;
</description>
        <pubDate>Mon, 05 Oct 2015 18:00:00 +0200</pubDate>
        <link>http://probedock.io/blog/releases/2015/10/05/probedock-v0_1_9/</link>
        <guid isPermaLink="true">http://probedock.io/blog/releases/2015/10/05/probedock-v0_1_9/</guid>
        
        
        <category>releases</category>
        
      </item>
    
      <item>
        <title>Probe Dock at the EBU DevCon 2015!</title>
        <description>&lt;p&gt;We will tell the story behind Probe Dock at the &lt;a href=&quot;https://tech.ebu.ch/events/devcon15&quot;&gt;EBU Developer Conference&lt;/a&gt; on October 7! Our session will be at 12:10, and the conference will take place at &lt;a href=&quot;http://maps.google.ch/maps?f=q&amp;amp;source=s_q&amp;amp;hl=en&amp;amp;geocode=&amp;amp;q=european+broadcasting+union&amp;amp;sll=46.205393,6.13555&amp;amp;sspn=0.073776,0.167713&amp;amp;ie=UTF8&amp;amp;hq=european+broadcasting+union&amp;amp;hnear=&amp;amp;ll=46.236378,6.135521&amp;amp;spn=0.070766,0.167713&amp;amp;z=13&amp;amp;iwloc=A&quot;&gt;EBU Headquarters&lt;/a&gt; in Geneva.&lt;/p&gt;

&lt;p&gt;This third EBU Developer Conference will provide an opportunity to learn about best practices in software engineering and get hands-on with current development and deployment tools. Participants will pick up new ideas to run software-driven broadcast infrastructures and to improve their engineering workflows and overall development teams’ organisation.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;DevCon 2015 features keynotes from Cornelius Suermann (PayPal), Bob Uva (New Relic) and Ken Schwaber (Scrum.org).&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;The conference sessions cover Big Data &amp;amp; Recommendation Systems, Security, Identity Management, DevOps, Distributed Applications, Open Source. Agile Management, Applications for Connected TVs.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Hands-on Workshops are provided on CPA, D3.js, and Visual Radio and there will be an Agile Clinic, a pitching session and an informal drinks night!&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h2 id=&quot;our-presentation-from-nothing-to-thousands-of-tests&quot;&gt;Our presentation: From nothing to thousands of tests&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;We worked in a startup where over 6 years the technology team grew from 1 to 25 people, and from nothing we built an automated test suite with thousands of tests. We will tell the story of how we used automated testing as a cornerstone of agile methodologies to increase software quality, and how we solved the main issues we encountered: How do you show the value of automated tests to developers and motivate them to write more? How can you write better tests? How can you have a comprehensive view of software quality across components and technologies?&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</description>
        <pubDate>Thu, 01 Oct 2015 22:00:00 +0200</pubDate>
        <link>http://probedock.io/blog/news/2015/10/01/probedock-at-ebu-devcon/</link>
        <guid isPermaLink="true">http://probedock.io/blog/news/2015/10/01/probedock-at-ebu-devcon/</guid>
        
        
        <category>news</category>
        
      </item>
    
      <item>
        <title>Probe Dock selected for the CTI Business Concept course</title>
        <description>&lt;p&gt;Probe Dock has been selected as the project our team will work on in the &lt;a href=&quot;http://www.cti-entrepreneurship.ch/en/module-en/business-concept/&quot;&gt;CTI Business Concept course&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For 10 evenings, we will learn to become entrepreneurs. We will have access to numerous resources and &lt;a href=&quot;http://west.cti-entrepreneurship.ch/en/trainers/&quot;&gt;people&lt;/a&gt; to challenge and develop our business idea.&lt;/p&gt;

&lt;p&gt;The Business Concept course is one of four modules offered by the &lt;a href=&quot;https://www.kti.admin.ch/kti/en/home.html&quot;&gt;Commission for Technology and Innovation (CTI)&lt;/a&gt;, a Swiss program for technology startups.&lt;/p&gt;

&lt;h2 id=&quot;about-the-course&quot;&gt;About the course&lt;/h2&gt;

&lt;blockquote&gt;
  &lt;p&gt;Would you like to become an entrepreneur by creating or joining a knowledge- or technology-based start-up company? The “Business Concept” module will teach you how to think and act like an entrepreneur, how to transform an idea into a business concept and gain theoretical and practical expertise to play multiple key roles in a start-up, or to set up you own company.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;h3 id=&quot;content&quot;&gt;Content&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;Entrepreneurial thinking&lt;/li&gt;
  &lt;li&gt;Value proposition and service &amp;amp; product development&lt;/li&gt;
  &lt;li&gt;Protection of innovation&lt;/li&gt;
  &lt;li&gt;Business relations with customers&lt;/li&gt;
  &lt;li&gt;Financial planning&lt;/li&gt;
  &lt;li&gt;Financing&lt;/li&gt;
  &lt;li&gt;Building a strong team&lt;/li&gt;
  &lt;li&gt;Presenting your business ideas&lt;/li&gt;
  &lt;li&gt;Start-up ecosystem&lt;/li&gt;
&lt;/ul&gt;
</description>
        <pubDate>Tue, 29 Sep 2015 12:00:00 +0200</pubDate>
        <link>http://probedock.io/blog/news/2015/09/29/probedock-selected-for-the-cti-business-concept-course/</link>
        <guid isPermaLink="true">http://probedock.io/blog/news/2015/09/29/probedock-selected-for-the-cti-business-concept-course/</guid>
        
        
        <category>news</category>
        
      </item>
    
      <item>
        <title>Probe Dock v0.1.8 Released</title>
        <description>&lt;p&gt;&lt;strong&gt;Probe Dock v0.1.8&lt;/strong&gt; is now available!
This version brings you new analytics features and a few UI improvements.&lt;/p&gt;

&lt;p&gt;Read more about what has been improved:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;#dashboard&quot;&gt;Dashboard&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#report-details&quot;&gt;Report details&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#projects-list&quot;&gt;Projects list&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;#reports-table&quot;&gt;Report table&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&quot;dashboard&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;dashboard&quot;&gt;Dashboard&lt;/h2&gt;

&lt;p&gt;The latest reports widget has been renamed to &lt;em&gt;Recent Activity&lt;/em&gt; and gives much more information about test runs.
In addition to the runner, time and health bar, it now also shows the &lt;strong&gt;project(s)&lt;/strong&gt; and &lt;strong&gt;categories&lt;/strong&gt; of the tests that were run.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/probedock-v0_1_8/dashboard-recent-activity.png&quot; alt=&quot;Dashboard recent activity&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The new tests graph can now be &lt;strong&gt;filtered by project and/or user&lt;/strong&gt;, so you can now which projects have the most tests or who are the most active contributors.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/probedock-v0_1_8/dashboard-new-tests.png&quot; alt=&quot;Dashboard new tests&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;report-details&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;report-details&quot;&gt;Report details&lt;/h2&gt;

&lt;p&gt;With the new report filters, you can display only the results you are interested in:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/probedock-v0_1_8/report-details-filters.png&quot; alt=&quot;Report details filters&quot; /&gt;&lt;/p&gt;

&lt;p&gt;You can filter by &lt;strong&gt;category, tags or tickets&lt;/strong&gt;.
Or you can select tests with a name that matches your &lt;strong&gt;search&lt;/strong&gt;.
Finally, toggle buttons allow you to show/hide &lt;strong&gt;passed results, failed results, inactive results, results from existing tests and results of new tests&lt;/strong&gt; (tests that were first seen in this test run).&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Note that for now, the doughnut chart indicating the overall status of the test run is not affected by applied filters.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Additionally, the categories of the tests that were run are also shown next to the project(s) under the title:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/probedock-v0_1_8/report-details-categories.png&quot; alt=&quot;Report details categories&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;projects-list&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;projects-list&quot;&gt;Projects list&lt;/h2&gt;

&lt;p&gt;Each project box in the project list now shows a pie chart indicating the &lt;strong&gt;overall status of the last test run&lt;/strong&gt; for that project:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/media/probedock-v0_1_8/projects-list.png&quot; alt=&quot;Projects list&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&quot;reports-table&quot;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&quot;reports-table&quot;&gt;Reports table&lt;/h2&gt;

&lt;p&gt;The following improvements have been made to the reports table:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;The &lt;em&gt;Runner(s)&lt;/em&gt; column is now left-aligned.&lt;/li&gt;
  &lt;li&gt;Milliseconds are no longer displayed for durations longer than a minute.&lt;/li&gt;
  &lt;li&gt;The &lt;em&gt;Projects&lt;/em&gt; column has become the &lt;em&gt;Details&lt;/em&gt; column and also indicates the &lt;strong&gt;categories&lt;/strong&gt; of the tests that were run.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/media/probedock-v0_1_8/reports-table.png&quot; alt=&quot;Reports table&quot; /&gt;&lt;/p&gt;
</description>
        <pubDate>Wed, 09 Sep 2015 22:00:00 +0200</pubDate>
        <link>http://probedock.io/blog/releases/2015/09/09/probedock-v0_1_8/</link>
        <guid isPermaLink="true">http://probedock.io/blog/releases/2015/09/09/probedock-v0_1_8/</guid>
        
        
        <category>releases</category>
        
      </item>
    
  </channel>
</rss>
